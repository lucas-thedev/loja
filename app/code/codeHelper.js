let codeRepository = require('./codeRepository');
let mysql = require('mysql');
let utils = require('../../utils/functions')

let codeHelper = {

    createCode (values) {
        let value = 1;
        return new Promise((resolve, reject) => {
            checkIfExists(value).then((res) => {
                let formattedValues = escape(value);
                codeRepository.createCode(formattedValues)
                .then((response) =>{
                    resolve(response);
                }, error => {
                    console.log(error);
                    reject();
                });
            });
        });

    },

    createCodeAuto () {
        return new Promise((resolve, reject) => {
            generateAutoCode().then((res) => {
                let formattedValues = escape(res);
                codeRepository.createCode(formattedValues)
                .then((response) =>{
                    resolve(response);
                }, error => {
                    console.log(error);
                    reject();
                });
            });
        });

    },

    editCode (values, id) {
        let a = {code: 'A5'}
        let b = 'A2'
        return new Promise((resolve, reject) => {

            utils.setEditValues(a).then((formattedValues) => {
                
                codeRepository.editClient(formattedValues, escape(b))
                .then((response) =>{
                    resolve(response);
                }, error => {
                    console.log(error);
                    reject();
                });
            });

        });

    },
}

function checkIfExists(value) {
    return new Promise((resolve, reject) => {
        codeRepository.findCodeById(value).then((res) => {
            if (res.length == 0) {
                resolve('dontExist');
            } else {
                reject();
            }
        });
    });
}

function generateAutoCode() {
    return new Promise((resolve) => {
        codeRepository.findLastAutoGeneratedCode().then((res) => {
            if(res.length === 0) {
                resolve('A0');
            } else {
                let number = res[0].code;
                let code = number.substring(1, number.length);
                let nextCodeNumber = parseInt(code) + 1;
                let nextCode = 'A' + nextCodeNumber.toString();

                resolve(nextCode);
            }
        })
    })
}

function escape(values) {
    return mysql.escape(values);
}


module.exports = codeHelper;